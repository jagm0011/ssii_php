<?
class KNN {
				//estructura con las similitudes
    private $vecinosSimilitudes;
   
    /* matriz con $matrizRating[i][j]
    * i= idItem
    * j= idUser
    */
    private $matrizRating;
    //parametros configuracion. Por defecto PCC
    // k vecinos
    private $PCC;
    private $SC;
    private $k;
    
    public function KNN($matrizRating, $k){
        $this->matrizRating=$matrizRating;
        $this->vecinosSimilitudes=array();
        $SC=0;
        $PCC=1;
        $this->k=$k;
    }

    public function calculoVecinos(){
        $con=0;
        //Empezamos recorriendo el vector con las valoraciones
        while($con<count($this->matrizRating)){
        				//vector con todos los usuario que han valorado esa pelicula
            $valActual = $this->matrizRating[$con];
            
            $con2=$con+1;
            while($con2<count($this->matrizRating)){
                $valActualDos=$this->matrizRating[$con2]; ;
                
                $similitud=calculaSimilitud($vActual, $vActualDos);
                $con2++;
            }
            
            $con++;
        }
    }
   
    //Calcula la similitud entre 2 peliculas.
    private function calculaSimilitud($v1, $v2){        
        //quiere decir que tienen valoraciones. Si alguno no tiene, la similitud es 0       
         if($this->PCC==1)
             return PCC($v1,$v2);
         else
             return SC($v1,$v2);        
        return 0;
    }
  
    /*****FUNCIONES CALCULO DE SIMILITUD******/
    //Coeficiente de correlacion de Pearson
    /*
     * r=1 correlacion perfect
     * 0<r<1 correlacion positiva
     * r=0 no existe relacion
     * 1<r<0 correlacion negativa
     * r=-1 correlacion negativa perfecta
     */
     
    public function PCC($v1, $v2){
        $mediaValoracionItem1=calculaMedia($v1);
        $mediaValoracionItem2=calculaMedia($v2);
        
       //Calculo numerador
        $sumatoriaNumerador=0;    
        for($con=0;$con<count($v1);$con++){
            $sumatoriaNumerador+=($v1[$con]-$mediaValoracionItem1)*($v2[$con]-$mediaValoracionItem2);                        
        }
        
        //Calculo denominador
        $sumatoriaDenominador1=0;    
        for($con=0;$con<count($v1);$con++){
            $sumatoriaDenominador1+=($v1[$con]-$mediaValoracionItem1)*($v2[$con]-$mediaValoracionItem2);            
        }
       
        $sumatoriaDenominador2=0;    
        for($con=0;$con<count($v2);$con++){
            $sumatoriaDenominador2+=($v2[$con]-$mediaValoracionItem2)*($v2[$con]-$mediaValoracionItem2);            
        }
        
        $sumatoriaDenominador=sqrt($sumatoriaDenominador1*$sumatoriaDenominador2);
        //return
        $resultado=$sumatoriaNumerador/$sumatoriaDenominador;
        //hay que hacer esta cuenta para transformala a medida de similitud
        return ($resultado+1)/2;
    }
    
    public function calculaMedia($v){
        $media=0;
        for($con=0;$con<count($v);$con++){
            $media+=$v[$con];
        }
        $media=$media/count($v);
        return $media;
    }
    
    //Similitud del coseno
    /*
     * r=0 minima similitus
     * r=1 maxima similitud
     *//*
    public float SC(Vector<Integer> v1, Vector<Integer> v2){
        
        return 0;
    }
    
   
*/
}
?>